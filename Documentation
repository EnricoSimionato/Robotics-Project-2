Robotics second project 2022

Members:
- Matteo Ronchetti 10702339
- Alberto Sandri 10698469 
- Enrico Simionato 10698193

Files description:
Folder "config": 
	- amcl.launch.xml contains the paramters which are needed to perform localization with amcl algorithm;
	-gmapping.launch.xml contains the parameters which are needed to perform gmapping SLAM algorithm.
Folder "launch":
	- amcl.launch starts all the nodes related to amcl localization (map server, amcl, scan_merger, node to broadcast odometry as a tf);
	- mapping.launch starts all the nodes related to gmapping (map server, amcl, scan_merger, node to broadcast odometry as a tf);
	- scan_merger.launch starts the node which merges multiple laser scans into a single one. The launch file sets some parameter needed to merge the scans;
Folder "maps":
	-map.pgm is the file containg the occupancy grid map file
	-map.yaml is the file containing metadata related to the map file
Folder "rviz":
	-rviz.rviz contains the configuration loaded by rviz when the launch file is called
Folder "script":
	-service.py starts a python node for reading the trajectory given by the amcl node and provides a service to draw the trajectory on the map
	-client.py starts the python node which call the trajectory drawing service
	-merger.py://////////////////////////////////////////////
Folder "src":
	-odom_tf.cpp is the node which subscribe to the odometry topic and publish the tf transformation between the odom frame and the baselink frame

Structure of the TF tree
The TF tree is composed by six frames: map, odom, base_link, laser_front, laser_rear, base_footprint.
The "map" frame is the frame related to the origin of the map
The "odom" frame is the frame related to the origin of the odometry
THe "base_link" frame is the frame placed in the odomic centre of the robot. This frame moves as the robot moves.
The "laser_front" is the frame with the origin on the position of the laser placed on the front of the robot
The "laser_rear" is the frame with the origin on the position of the laser placed on the rear part of the robot
The "base_footprint" ///////////////////non saprei
The tf tree can be displayed executing the command "rosrun tf_tree" after launching the launch file and a bag////////////

Bags' usage:
We decide to use the bag "robotics1_final.bag" for building the map. The other bags are used for doing the localization of the robot inside the precomputed map.


How to start
1) Move the folder "project2" from "10702339-10698469-10698193" to the folder "src" into the ROS workspace (in the course ~/robotics/src/);
(FORSE Open the file service.py inside the folder "script" and write the global path until the folder script insted of "/path_to_the_folder/", the lines which have to be changeg are highlited with the comment "# <<<<<----- You have to change the path here")
2) Open a terminal and move to your ROS workspace (in the course ~/robotics/);
3) Execute "catkin_make";
4) Execute "roslaunch project2 mapping.launch" for creating the map;
Now the nodes for doing the mapping of the area are running.
5) Start a bag (robotics1_final.bag, in our case) for starting the mapping step;
6) After the end of the bag, execute the command /////////////////// for saving the map /////path?;
7) Execute "roslaunch project2 amcl.launch" starting the localization nodes;
Now the nodes for doing the localizing of the robot are running.
8) Start a bag (robotics2_final.bag or robotics3_final.bag, in our case) for starting the localization inside the map, based on the datas received from sensors;
To use the service for drawing the trajectory on the map, execute "rosservice call //////servizio".

Notes:
